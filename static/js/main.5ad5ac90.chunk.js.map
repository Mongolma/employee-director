{"version":3,"sources":["pages/EmployeeDirectory.js","utils/API.js","utils/sortFunctions.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeDirectory","getUsers","axios","get","sortFunctions","compareValues","key","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","App","useState","employeesList","setEmployeesList","setEmployees","query","searchOptions","API","response","data","results","console","log","useEffect","loadEmployeesList","filtered","map","e","firstName","name","first","lastName","last","fullName","filter","employee","toLowerCase","includes","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAgCeA,I,iBCxBAC,EANE,CACfA,SAAU,WACR,OAAOC,IAAMC,IAAI,sFCwBJC,EA5BK,CAEjBC,cAAe,SAASC,GAAqB,IAAhBC,EAAe,uDAAP,MACpC,OAAO,SAAmBC,EAAGC,GAC3B,IAAKD,EAAEE,eAAeJ,KAASG,EAAEC,eAAeJ,GAE9C,OAAO,EAGT,IAAMK,EAA0B,kBAAXH,EAAEF,GACnBE,EAAEF,GAAKM,cAAgBJ,EAAEF,GACvBO,EAA0B,kBAAXJ,EAAEH,GACnBG,EAAEH,GAAKM,cAAgBH,EAAEH,GAEzBQ,EAAa,EAMjB,OALIH,EAAOE,EACTC,EAAa,EACJH,EAAOE,IAChBC,GAAc,GAGH,SAAVP,GAAmC,EAAdO,EAAmBA,KC+DpCC,MA9Ef,WAAe,MAE6BC,mBAAS,IAFtC,mBAENC,EAFM,KAESC,EAFT,OAIqBF,mBAAS,IAJ9B,mBAIKG,GAJL,aAM6BH,mBAAS,CACjDV,IAAK,YACLC,MAAO,MACPa,MAAO,KATI,mBAMNC,EANM,iDAyDb,4BAAAb,EAAA,+EAE2Bc,EAAIrB,WAF/B,OAEUsB,EAFV,OAGIL,EAAiBK,EAASC,KAAKC,SAHnC,gDAKIC,QAAQC,IAAR,MALJ,0DAzDa,2BA8BbC,qBAAU,YA9BG,mCA+BXC,KACC,IAGHD,qBAAU,WACR,IAOME,EAPWb,EAAcc,KAAI,SAACC,GAAD,mBAAC,eAC/BA,GAD8B,IAEjCC,UAAWD,EAAEE,KAAKC,MAClBC,SAAUJ,EAAEE,KAAKG,KACjBC,SAAS,GAAD,OAAKN,EAAEE,KAAKC,MAAZ,YAAqBH,EAAEE,KAAKG,WAGZE,QAAO,SAACC,GAAD,OAC/BA,EAASF,SACNG,cACAC,SAASrB,EAAcD,MAAMqB,kBAGlCX,EAASa,KACPvC,EAAcC,cAAcgB,EAAcf,IAAKe,EAAcd,QAG/DY,EAAaW,KACZ,CAACb,EAAeI,IAaNA,EAAcD,MAGTC,EAAcf,IACZe,EAAcd,OCjErBqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ad5ac90.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '../components/Card';\nimport { Container } from '../components/Grid';\nimport './employeeDirectory.css';\n\nfunction EmployeeDirectory(props) {\n  return (\n    <Container fluid>\n      {props.employees.length ? (\n        <div className=\"card-deck d-flex justify-content-center\">\n          {\n            props.employees.map(employee => {\n              return (\n                <Card key={employee.login.uuid.toString()} id={employee.login.uuid}>\n                  <img className=\"card-img-top\" src={employee.picture.large} alt={employee.name.first} />\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{employee.name.first} {employee.name.last}</h5>\n                    <p className=\"card-text\">Email: {employee.email}</p>\n                    <p className=\"card-text\">Phone: {employee.phone}</p>\n                  </div>\n                </Card>\n              );\n            })\n          }\n        </div>\n      ) : (\n        <div className=\"absoluteCenter\"><div><i className=\"fas fa-spinner fa-pulse\"></i></div></div>\n        )}\n    </Container>\n  )\n};\n\nexport default EmployeeDirectory;\n","import axios from 'axios';\n\nconst getUsers = {\n  getUsers: function () {\n    return axios.get('https://randomuser.me/api/?results=100&nat=us&inc=name,email,phone,login,picture');\n  }\n}\n\nexport default getUsers;","const sortFunctions = {\n    // To be used with a sort function: Ex. singers.sort(compareValues('band', 'desc'));\n     compareValues: function(key, order = 'asc') {\n      return function innerSort(a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          // property doesn't exist on either object\n          return 0;\n        }\n    \n        const varA = (typeof a[key] === 'string')\n          ? a[key].toUpperCase() : a[key];\n        const varB = (typeof b[key] === 'string')\n          ? b[key].toUpperCase() : b[key];\n    \n        let comparison = 0;\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n        return (\n          (order === 'desc') ? (comparison * -1) : comparison\n        );\n      };\n    },\n  \n  };\n  \n  export default sortFunctions;","import React, { useState, useEffect } from \"react\";\nimport Nav from \"./components/Nav\";\nimport EmployeeDirectory from \"./pages/EmployeeDirectory\";\nimport API from \"./utils/API\";\nimport sortFunctions from \"./utils/sortFunctions\";\n\nfunction App() {\n  // EmployeesList is the master list, derived from the API.\n  const [employeesList, setEmployeesList] = useState([]);\n  // Employees is the array to be modified with sorting & filtering.\n  const [employees, setEmployees] = useState([]);\n\n  const [searchOptions, setSearchOptions] = useState({\n    key: \"firstName\",\n    order: \"asc\",\n    query: \"\",\n  });\n\n  const onQueryChange = (e) => {\n    const { value } = e.target;\n\n    setSearchOptions((currentSearchOptions) => ({\n      ...currentSearchOptions,\n      query: value,\n    }));\n  };\n\n  const onSortChange = (key, order) => {\n    setSearchOptions((currentSearchOptions) => ({\n      ...currentSearchOptions,\n      key,\n      order,\n    }));\n  };\n\n  // Load all employees and store them with setEmployeesList\n  useEffect(() => {\n    loadEmployeesList();\n  }, []);\n\n  // Only sets employees array once employeesList has changed.\n  useEffect(() => {\n    const modified = employeesList.map((e) => ({\n      ...e,\n      firstName: e.name.first,\n      lastName: e.name.last,\n      fullName: `${e.name.first} ${e.name.last}`,\n    }));\n\n    const filtered = modified.filter((employee) =>\n      employee.fullName\n        .toLowerCase()\n        .includes(searchOptions.query.toLowerCase())\n    );\n\n    filtered.sort(\n      sortFunctions.compareValues(searchOptions.key, searchOptions.order)\n    );\n\n    setEmployees(filtered);\n  }, [employeesList, searchOptions]);\n\n  // Loads all employees and sets them to employeesList\n  async function loadEmployeesList() {\n    try {\n      const response = await API.getUsers();\n      setEmployeesList(response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n<div>\n      <Nav\n        query={searchOptions.query}\n        onInputChange={onQueryChange}\n        onSortChange={onSortChange}\n        currentKey={searchOptions.key}\n        currentOrder={searchOptions.order}\n      />\n      <EmployeeDirectory employees={employees}></EmployeeDirectory>\n    </div>\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}